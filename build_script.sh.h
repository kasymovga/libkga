static const char* build_script =
"\n"
"test -z \"$SOURCES_NAME\" && SOURCES_NAME=\"$NAME\"\n"
"test -z \"$SOURCES_VERSION\" && SOURCES_VERSION=\"$VERSION\"\n"
"case \"$NAME\" in\n"
"lib*)\n"
"	PACKAGE_PREF=\"`expr substr \"$NAME\" 1 4`\"\n"
"	;;\n"
"*)\n"
"	PACKAGE_PREF=\"`expr substr \"$NAME\" 1 1`\"\n"
"	;;\n"
"esac\n"
"case \"$SOURCES_NAME\" in\n"
"lib*)\n"
"	SOURCES_PREF=\"`expr substr \"$SOURCES_NAME\" 1 4`\"\n"
"	;;\n"
"*)\n"
"	SOURCES_PREF=\"`expr substr \"$SOURCES_NAME\" 1 1`\"\n"
"	;;\n"
"esac\n"
"PACKAGE_BASE_DIR=packages/\"$PORTS_ARCH\"/\"$PACKAGE_PREF\"/\"$NAME\"\n"
"SOURCES_BASE_DIR=distfiles/\"$SOURCES_PREF\"/\"$SOURCES_NAME\"\n"
"PACKAGE_DIR=\"$PORTSROOT\"/\"$PACKAGE_BASE_DIR\"\n"
"SOURCES_DIR=\"$PORTSROOT\"/\"$SOURCES_BASE_DIR\"\n"
"PKGFILENAME=\"$NAME#$VERSION-$BUILD.pkg\"\n"
"\n"
"ARC_SUFFIXES='.tar.xz .tar.bz2 .tar.gz .tar.lzma .tgz .tbz .txz .tlz .cpio.xz .cpio.gz .cpio.bz2 .cpio.lzma .cgz .cbz .clz .cxz'\n"
"mkdir -p fr || exit 1\n"
"BUILDDIR=\"`pwd`\"\n"
"FAKEROOTDIR=\"$BUILDDIR/fr\"\n"
"\n"
"get_cache_package() {\n"
"	echo get_cache_package \"$@\"\n"
"	unpack_by_name \"$PACKAGE_DIR/$PKGFILENAME\" \"$FAKEROOTDIR\"\n"
"	return $?\n"
"}\n"
"\n"
"get_cache_sources() {\n"
"	echo get_cache_sources \"$@\"\n"
"	unpack_by_name \"$SOURCES_DIR/$SOURCES_NAME-$SOURCES_VERSION\" .\n"
"	return $?\n"
"}\n"
"\n"
"get_sync_package() {\n"
"	echo get_sync_package \"$@\"\n"
"	case \"$SYNC_TO\" in\n"
"	http://*|ftp://)\n"
"		PKGFILENAME_URL=\"`echo \"$PKGFILENAME\"|sed 's/#/%23/'`\"\n"
"		for SUF in $ARC_SUFFIXES\n"
"		do\n"
"			wget \"$SYNC_TO/$PACKAGE_BASE_DIR/$PKGFILENAME_URL$SUF\" && unpack \"`pwd`/$PKGFILENAME$SUF\" \"$FAKEROOTDIR\" && return 0\n"
"		done\n"
"		;;\n"
"	*)\n"
"		unpack_by_name \"$SYNC_TO/$PACKAGE_BASE_DIR/$PKGFILENAME\" \"$FAKEROOTDIR\" && return 0\n"
"		;;\n"
"	esac\n"
"	return 1\n"
"}\n"
"\n"
"get_sync_sources() {\n"
"	echo get_sync_sources \"$@\"\n"
"	case \"$SYNC_TO\" in\n"
"	http://*|ftp://)\n"
"		for SUF in $ARC_SUFFIXES\n"
"		do\n"
"			wget \"$SYNC_TO/$SOURCES_BASE_DIR/$SOURCES_NAME-$SOURCES_VERSION$SUF\" && unpack \"`pwd`/$SOURCES_NAME-$SOURCES_VERSION$SUF\" . && return 0\n"
"		done\n"
"		;;\n"
"	*)\n"
"		unpack_by_name \"$SYNC_TO/$SOURCES_BASE_DIR/$SOURCES_NAME-$SOURCES_VERSION\" . && return 0\n"
"		;;\n"
"	esac\n"
"	return 1\n"
"}\n"
"\n"
"uncpio() {\n"
"	echo uncpio \"$@\"\n"
"	DESTINATION=\"$1\"\n"
"	cd \"$DESTINATION\"\n"
"	cpio -imd\n"
"	CPIO_RET=\"$?\"\n"
"	cd - > /dev/null\n"
"	return \"$CPIO_RET\"\n"
"}\n"
"\n"
"unpack() {\n"
"	echo unpack \"$@\"\n"
"	SOURCE=\"$1\"\n"
"	DESTINATION=\"$2\"\n"
"	case \"$1\" in\n"
"	*.tar.gz|*.tgz)\n"
"		zcat \"$1\" | tar x\n"
"		;;\n"
"	*.tar.bz2|*.tbz)\n"
"		bzcat \"$1\" | tar x\n"
"		;;\n"
"	*.tar.xz|*.txz)\n"
"		xzcat \"$1\" | tar x\n"
"		;;\n"
"	*.tar.lzma|*.tlz)\n"
"		lzcat \"$1\" | tar x\n"
"		;;\n"
"	*.cpio.gz|*.cgz)\n"
"		gzcat \"$1\" | uncpio \"$2\"\n"
"		;;\n"
"	*.cpio.bz2|*.cbz)\n"
"		bzcat \"$1\" | uncpio \"$2\"\n"
"		;;\n"
"	*.cpio.xz|*.cxz)\n"
"		xzcat \"$1\" | uncpio \"$2\"\n"
"		;;\n"
"	*.cpio.lzma|*.clz)\n"
"		lzcat \"$1\" | uncpio \"$2\"\n"
"		;;\n"
"	*)\n"
"		false\n"
"	esac\n"
"	return $?\n"
"}\n"
"\n"
"unpack_by_name() {\n"
"	echo unpack_by_name \"$@\"\n"
"	SOURCE=\"$1\"\n"
"	DESTINATION=\"$2\"\n"
"	for SUF in $ARC_SUFFIXES\n"
"	do\n"
"		test -f \"$SOURCE$SUF\" || continue\n"
"		unpack \"$SOURCE$SUF\" \"$DESTINATION\"\n"
"		return $?\n"
"	done\n"
"	return 1\n"
"}\n"
"\n"
"save_package_to_cache() {\n"
"	echo save_package_to_cache \"$@\"\n"
"	if test \"$CACHE_PACKAGES\" = none\n"
"	then\n"
"		return 0\n"
"	fi\n"
"	mkdir -p \"$PACKAGE_DIR\"\n"
"	if test \"$CACHE_PACKAGES\" != all\n"
"	then\n"
"		rm -f \"$PACKAGE_DIR\"/*\n"
"	fi\n"
"	cd \"$FAKEROOTDIR\" || return 1\n"
"	find `ls -A`| cpio --owner root.root -o 2> /dev/null| xz > \"$PACKAGE_DIR/$PKGFILENAME.cpio.xz\"\n"
"	return $?\n"
"}\n"
"\n"
"save_sources_to_cache() {\n"
"	echo save_sources_to_cache \"$@\"\n"
"	if test \"$CACHE_SOURCES\" = none\n"
"	then\n"
"		return 0\n"
"	fi\n"
"	mkdir -p \"$SOURCES_DIR\"\n"
"	if test \"$CACHE_SOURCES\" != all\n"
"	then\n"
"		rm -f \"$SOURCES_DIR\"/*\n"
"	fi\n"
"	tar c \"$SOURCES_NAME-$SOURCES_VERSION\" | xz > \"$SOURCES_DIR/$SOURCES_NAME-$SOURCES_VERSION.tar.xz\"\n"
"	return $?\n"
"}\n"
"\n"
"_get_package() {\n"
"	if get_cache_package\n"
"	then\n"
"		return 0\n"
"	fi\n"
"	if get_sync_package\n"
"	then\n"
"		save_package_to_cache\n"
"		return 0\n"
"	fi\n"
"	return 1\n"
"}\n"
"\n"
"_get_source() {\n"
"	if get_cache_sources\n"
"	then\n"
"		echo -n\n"
"	else \n"
"		if get_sync_sources\n"
"		then\n"
"			echo -n\n"
"		else\n"
"			if port_get_sources\n"
"			then\n"
"				cd \"$BUILDDIR\"\n"
"				if test ! -d \"$SOURCES_NAME-$SOURCES_VERSION\"\n"
"				then\n"
"					unpack_by_name \"$SOURCES_NAME-$SOURCES_VERSION\" . || return 1\n"
"				fi\n"
"			else\n"
"				return 1\n"
"			fi\n"
"		fi\n"
"		save_sources_to_cache\n"
"	fi\n"
"	return 0\n"
"}\n"
"\n"
"_build() {\n"
"	if test \"$NOSOURCE\" != y\n"
"	then\n"
"		cd \"$SOURCES_NAME-$SOURCES_VERSION\" || return 1\n"
"	else\n"
"		cd \"$BUILDDIR\"\n"
"	fi\n"
"	if test -f \"$PORTDIR/fr.tar\"\n"
"	then\n"
"		tar x -C \"$FAKEROOTDIR\" -f \"$PORTDIR/fr.tar\" || return 1\n"
"	fi\n"
"	if test -d \"$PORTDIR/fr\"\n"
"	then\n"
"		cp -dR \"$PORTDIR/fr/\"* \"$FAKEROOTDIR\" || return 1\n"
"	fi\n"
"	if port_build\n"
"	then\n"
"		echo -n \"$NAME\" > \"$FAKEROOTDIR/.name\" || return 1\n"
"		echo -n \"$VERSION-$BUILD\" > \"$FAKEROOTDIR/.version\" || return 1\n"
"		for F in .install .noupdate .preinstall\n"
"		do\n"
"			if test -f \"$PORTDIR/$F\"\n"
"			then\n"
"				cp \"$PORTDIR/$F\" \"$FAKEROOTDIR\" || exit 1\n"
"			fi\n"
"		done\n"
"		cd \"$BUILDDIR\"\n"
"		save_package_to_cache\n"
"		return 0\n"
"	fi\n"
"	return 1\n"
"}\n"
"\n"
"echo Script for \"$NAME/$VERSION-$BUILD\" started.\n"
"case \"$1\" in\n"
"get_package)\n"
"	echo Try get package...\n"
"	_get_package && exit 0\n"
"	;;\n"
"build_package)\n"
"	if test \"$NOSOURCE\" != y\n"
"	then\n"
"		echo Try get sources...\n"
"		_get_source || {\n"
"			echo \"ERROR: Cannot get sources $SOURCES_NAME-$SOURCES_VERSION for $NAME/$VERSION\"\n"
"			exit 1\n"
"		}\n"
"	fi\n"
"	echo Try build...\n"
"	_build || {\n"
"		echo \"ERROR: Cannot build $NAME/$VERSION\"\n"
"		exit 1\n"
"	}\n"
"	exit 0\n"
"	;;\n"
"esac\n"
"echo Script for \"$NAME/$VERSION-$BUILD\" failed.\n"
"exit 1\n"
""
;
